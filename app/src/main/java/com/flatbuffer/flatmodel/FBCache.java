package com.flatbuffer.flatmodel;// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class FBCache extends Table {
    public static FBCache getRootAsFBCache(ByteBuffer _bb) {
        return getRootAsFBCache(_bb, new FBCache());
    }

    public static FBCache getRootAsFBCache(ByteBuffer _bb, FBCache obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public static int createFBCache(FlatBufferBuilder builder,
                                    int ids,
                                    int hashesOffset) {
        builder.startObject(2);
        FBCache.addHashes(builder, hashesOffset);
        FBCache.addIds(builder, ids);
        return FBCache.endFBCache(builder);
    }

    public static void startFBCache(FlatBufferBuilder builder) {
        builder.startObject(2);
    }

    public static void addIds(FlatBufferBuilder builder, int ids) {
        builder.addInt(0, ids, 0);
    }

    public static void addHashes(FlatBufferBuilder builder, int hashesOffset) {
        builder.addOffset(1, hashesOffset, 0);
    }

    public static int createHashesVector(FlatBufferBuilder builder, int[] data) {
        builder.startVector(4, data.length, 4);
        for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]);
        return builder.endVector();
    }

    public static void startHashesVector(FlatBufferBuilder builder, int numElems) {
        builder.startVector(4, numElems, 4);
    }
    // public ByteBuffer hashesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 4); }

    public static int endFBCache(FlatBufferBuilder builder) {
        int o = builder.endObject();
        return o;
    }

    public static void finishFBCacheBuffer(FlatBufferBuilder builder, int offset) {
        builder.finish(offset);
    }

    public void __init(int _i, ByteBuffer _bb) {
        bb_pos = _i;
        bb = _bb;
    }

    public FBCache __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }

    public int ids() {
        int o = __offset(4);
        return o != 0 ? bb.getInt(o + bb_pos) : 0;
    }

    public int hashes(int j) {
        int o = __offset(6);
        return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0;
    }

    public int hashesLength() {
        int o = __offset(6);
        return o != 0 ? __vector_len(o) : 0;
    }

    public ByteBuffer hashesAsByteBuffer() {
        return __vector_as_bytebuffer(6, 4);
    }
    // public static void finishSizePrefixedFBCacheBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }
}

